/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package PaintGUI;

/**
 *
 * @author alfa
 */
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Point;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import javax.swing.JColorChooser;

public class MainWindow extends javax.swing.JFrame implements Node {

    /**
     * Creates new form NewJFrame
     */
    private Graphics g;
    private int posX, posY;
    private Point pos;
    private int cSquare, cCircle, cRect, cLine, cTri;
    private Shape currentShape;

    public MainWindow() {
        initComponents();
        this.setTitle("Paint");
        /* drawingPanel.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                int posX = e.getX();
                int posY = e.getY();
                pos = new Point(posX, posY);
            }
        });*/
    }

    public void draw(Shape s) {
        drawingPanel.addShape(s);
        drawingPanel.paintComponent(g);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ovalBtn = new javax.swing.JButton();
        lineBtn = new javax.swing.JButton();
        squareBtn = new javax.swing.JButton();
        rectangleBtn = new javax.swing.JButton();
        selectLabel = new javax.swing.JLabel();
        shapeComboBox = new javax.swing.JComboBox<>();
        colorizeBtn = new javax.swing.JButton();
        deleteBtn = new javax.swing.JButton();
        drawingPanel = new MyPanel();
        trinagleBtn = new javax.swing.JButton();
        copyBtn = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        saveMenuBtn = new javax.swing.JMenuItem();
        menuLoadBtn = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new Color(255, 255, 255));

        ovalBtn.setText("Oval");
        ovalBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ovalBtnActionPerformed(evt);
            }
        });

        lineBtn.setText("Line Segment");
        lineBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lineBtnActionPerformed(evt);
            }
        });

        squareBtn.setText("Square");
        squareBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                squareBtnActionPerformed(evt);
            }
        });

        rectangleBtn.setText("Rectangle");
        rectangleBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rectangleBtnActionPerformed(evt);
            }
        });

        selectLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        selectLabel.setText("Select Shape");
        selectLabel.setFocusable(false);

        shapeComboBox.setToolTipText("Choose Shape");
        shapeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shapeComboBoxActionPerformed(evt);
            }
        });

        colorizeBtn.setText("Colorize");
        colorizeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorizeBtnActionPerformed(evt);
            }
        });

        deleteBtn.setText("Delete");
        deleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });

        drawingPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new Color(0, 0, 0)));
        drawingPanel.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(MouseEvent evt) {
                drawingPanelMouseDragged(evt);
            }
        });
        drawingPanel.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                drawingPanelMouseClicked(evt);
            }
            public void mousePressed(MouseEvent evt) {
                drawingPanelMousePressed(evt);
            }
            public void mouseReleased(MouseEvent evt) {
                drawingPanelMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout drawingPanelLayout = new javax.swing.GroupLayout(drawingPanel);
        drawingPanel.setLayout(drawingPanelLayout);
        drawingPanelLayout.setHorizontalGroup(
            drawingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        drawingPanelLayout.setVerticalGroup(
            drawingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 460, Short.MAX_VALUE)
        );

        trinagleBtn.setText("Triangle");
        trinagleBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trinagleBtnActionPerformed(evt);
            }
        });

        copyBtn.setText("Copy");
        copyBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyBtnActionPerformed(evt);
            }
        });

        jMenu1.setText("File");
        jMenu1.setToolTipText("");

        saveMenuBtn.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        saveMenuBtn.setText("Save");
        saveMenuBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMenuBtnActionPerformed(evt);
            }
        });
        jMenu1.add(saveMenuBtn);

        menuLoadBtn.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        menuLoadBtn.setText("Load");
        jMenu1.add(menuLoadBtn);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addComponent(selectLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(50, 50, 50))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(colorizeBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(deleteBtn))
                            .addComponent(shapeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(copyBtn))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(ovalBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(45, 45, 45)
                        .addComponent(lineBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 45, Short.MAX_VALUE)
                        .addComponent(trinagleBtn)
                        .addGap(48, 48, 48)
                        .addComponent(squareBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(rectangleBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(drawingPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(33, 33, 33))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(23, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ovalBtn)
                    .addComponent(lineBtn)
                    .addComponent(squareBtn)
                    .addComponent(rectangleBtn)
                    .addComponent(trinagleBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(selectLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(shapeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(colorizeBtn)
                            .addComponent(deleteBtn))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(copyBtn))
                    .addComponent(drawingPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ovalBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ovalBtnActionPerformed
        // TODO add your handling code here:

        Circle circle = new Circle();
        CircleFrame circleFrame = new CircleFrame(circle);
        circleFrame.setParentNode(this);
        circleFrame.setVisible(true);
        this.setVisible(false);
        cCircle++;
        shapeComboBox.addItem("Oval" + cCircle);
        draw(circle);
    }//GEN-LAST:event_ovalBtnActionPerformed

    private void squareBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_squareBtnActionPerformed
        // TODO add your handling code here:
        /*String value;
        value = JOptionPane.showInputDialog("Set Cooridnate X");
        int x = Integer.parseInt(value);

        value = JOptionPane.showInputDialog("Set Cooridnate Y");
        int y = Integer.parseInt(value);

        value = JOptionPane.showInputDialog("Set Side's Length");
        int sLength = Integer.parseInt(value);

        Rectangle rectangle = new Rectangle(new Point(x, y), sLength, sLength);
        Color borderColor = JColorChooser.showDialog(null, "Choose Border Color", Color.black);
        rectangle.setColor(borderColor);
        Color fillColor = JColorChooser.showDialog(null, "Choose Fill Color", Color.black);
        rectangle.setColor(fillColor);
        shapeComboBox.addItem("Square" + (drawingPanel.getShapes().length + 1));
        draw(rectangle);*/
        Rectangle square = new Rectangle();
        SquareFrame squareFrame = new SquareFrame(square);
        squareFrame.setParentNode(this);
        squareFrame.setVisible(true);
        this.setVisible(false);
        cSquare++;
        shapeComboBox.addItem("Square" + cSquare);
        draw(square);
    }//GEN-LAST:event_squareBtnActionPerformed

    private void shapeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shapeComboBoxActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_shapeComboBoxActionPerformed

    private void lineBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lineBtnActionPerformed
        // TODO add your handling code here:
        /* String value;

        value = JOptionPane.showInputDialog("Set Cooridnate X of first point");
        int x1 = Integer.parseInt(value);
        value = JOptionPane.showInputDialog("Set Cooridnate Y of first point");
        int y1 = Integer.parseInt(value);

        value = JOptionPane.showInputDialog("Set Cooridnate X of second point");
        int x2 = Integer.parseInt(value);
        value = JOptionPane.showInputDialog("Set Cooridnate Y of second point");
        int y2 = Integer.parseInt(value);

        LineSegment line = new LineSegment(new Point(x1, y1), new Point(x2, y2));
        Color borderColor = JColorChooser.showDialog(null, "Choose Border Color", Color.black);
        line.setColor(borderColor);
        shapeComboBox.addItem("Line" + (drawingPanel.getShapes().length + 1));
        draw(line);*/
        LineSegment line = new LineSegment();
        LineFrame lineFrame = new LineFrame(line);
        lineFrame.setParentNode(this);
        lineFrame.setVisible(true);
        this.setVisible(false);
        cLine++;
        shapeComboBox.addItem("Line" + cLine);
        draw(line);

    }//GEN-LAST:event_lineBtnActionPerformed

    private void rectangleBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rectangleBtnActionPerformed
        // TODO add your handling code here:
        Rectangle rectangle = new Rectangle();
        RectFrame rectFrame = new RectFrame(rectangle);
        rectFrame.setParentNode(this);
        rectFrame.setVisible(true);
        this.setVisible(false);
        cRect++;
        shapeComboBox.addItem("Rectangle" + cRect);
        draw(rectangle);

    }//GEN-LAST:event_rectangleBtnActionPerformed

    private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBtnActionPerformed
        // TODO add your handling code here:
        int index = shapeComboBox.getSelectedIndex();
        drawingPanel.removeShape(drawingPanel.getShapes()[index]);
        shapeComboBox.removeItemAt(index);
        drawingPanel.refresh(null);
    }//GEN-LAST:event_deleteBtnActionPerformed

    private void colorizeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorizeBtnActionPerformed
        // TODO add your handling code here:
        int index = shapeComboBox.getSelectedIndex();
        Color borderColor = JColorChooser.showDialog(null, "Choose Border Color", Color.black);
        drawingPanel.getShapes()[index].setColor(borderColor);
        Color fillColor = JColorChooser.showDialog(null, "Choose fill Color", Color.black);
        drawingPanel.getShapes()[index].setFillColor(fillColor);
        drawingPanel.refresh(null);
    }//GEN-LAST:event_colorizeBtnActionPerformed

    private void drawingPanelMouseClicked(MouseEvent evt) {//GEN-FIRST:event_drawingPanelMouseClicked
        // TODO add your handling code here:

    }//GEN-LAST:event_drawingPanelMouseClicked

    private void drawingPanelMousePressed(MouseEvent evt) {//GEN-FIRST:event_drawingPanelMousePressed
        // TODO add your handling code here:
        Point pos = new Point(evt.getX(), evt.getY());
        for (int i = 0; i < drawingPanel.getShapes().length; i++) {
            if (((AbstractShape) drawingPanel.getShapes()[i]).contains(pos)) {
                currentShape = ((AbstractShape) drawingPanel.getShapes()[i]);
                shapeComboBox.setSelectedIndex(i);
                break;
            }
        }
    }//GEN-LAST:event_drawingPanelMousePressed

    private void drawingPanelMouseReleased(MouseEvent evt) {//GEN-FIRST:event_drawingPanelMouseReleased
        // TODO add your handling code here:
        /* int releaseX = evt.getX();
        int releaseY = evt.getY();
        Point release = new Point(releaseX, releaseY);
        Point pos = new Point(evt.getX(), evt.getY());
        for (int i = 0; i < drawingPanel.getShapes().length; i++) {
            if (((AbstractShape) drawingPanel.getShapes()[i]).contains(pos)) {
                ((AbstractShape) drawingPanel.getShapes()[i]).moveTo(release);
            }
        }
        drawingPanel.refresh(null);*/
        currentShape = null;
    }//GEN-LAST:event_drawingPanelMouseReleased

    private void trinagleBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trinagleBtnActionPerformed
        // TODO add your handling code here:
        Triangle triangle = new Triangle();
        TriangleFrame triFrame = new TriangleFrame(triangle);
        triFrame.setParentNode(this);
        triFrame.setVisible(true);
        this.setVisible(false);
        cTri++;
        shapeComboBox.addItem("Triangle" + cTri);
        draw(triangle);
    }//GEN-LAST:event_trinagleBtnActionPerformed

    private void drawingPanelMouseDragged(MouseEvent evt) {//GEN-FIRST:event_drawingPanelMouseDragged
        // TODO add your handling code here:
        /*Point pos = new Point(evt.getX(), evt.getY());
        for (int i = 0; i < drawingPanel.getShapes().length; i++) {
            if (((AbstractShape) drawingPanel.getShapes()[i]).contains(pos)) {
                currentShape = ((AbstractShape) drawingPanel.getShapes()[i]);
            }
        }*/
        if (currentShape != null) {
            ((AbstractShape) currentShape).moveTo(new Point(evt.getX(), evt.getY()));
            drawingPanel.refresh(null);
        }
    }//GEN-LAST:event_drawingPanelMouseDragged

    private void copyBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyBtnActionPerformed
        // TODO add your handling code here:
        String copiedName = (String) shapeComboBox.getSelectedItem();
        int index = shapeComboBox.getSelectedIndex();
        Shape copiedShape = drawingPanel.getShapes()[index];
        switch (copiedName.substring(0, copiedName.length() - 1)) {
            case "Oval":
                shapeComboBox.addItem("Oval" + ++cCircle);
                break;
            case "Square":
                shapeComboBox.addItem("Square" + ++cSquare);
                break;
            case "Rectangle":
                shapeComboBox.addItem("Rectangle" + ++cRect);
                break;
            case "Triangle":
                shapeComboBox.addItem("Triangle" + ++cTri);
                break;
            case "Line":
                shapeComboBox.addItem("Line" + ++cLine);
                break;
        }
         draw(copiedShape);

    }//GEN-LAST:event_copyBtnActionPerformed

    private void saveMenuBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMenuBtnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_saveMenuBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton colorizeBtn;
    private javax.swing.JButton copyBtn;
    private javax.swing.JButton deleteBtn;
    private MyPanel drawingPanel;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JButton lineBtn;
    private javax.swing.JMenuItem menuLoadBtn;
    private javax.swing.JButton ovalBtn;
    private javax.swing.JButton rectangleBtn;
    private javax.swing.JMenuItem saveMenuBtn;
    private javax.swing.JLabel selectLabel;
    private javax.swing.JComboBox<String> shapeComboBox;
    private javax.swing.JButton squareBtn;
    private javax.swing.JButton trinagleBtn;
    // End of variables declaration//GEN-END:variables

    @Override
    public void setParentNode(Node parent) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    @Override
    public Node getParentNode() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }
}
